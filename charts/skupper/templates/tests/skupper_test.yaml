---
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: skupper-test-role
rules:
  # Permissions for core resources
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
    verbs: ["get", "list", "watch"]
  # Permissions for deployments in apps API group
  - apiGroups: ["apps"]
    resources:
      - deployments
    verbs: ["get", "list", "watch"]
  # Permissions for RBAC resources
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources:
      - clusterroles
      - clusterrolebindings
      - roles
      - rolebindings
    verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding definition to bind the ClusterRole to the service account in the namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: skupper-test-rolebinding
subjects:
  - kind: ServiceAccount
    name: default
    namespace: "{{ .Values.controllerNamespace }}"
roleRef:
  kind: ClusterRole
  name: skupper-test-role
  apiGroup: rbac.authorization.k8s.io

---
# Test Pod with the required RBAC permissions and updated image
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test"
{{ if eq .Values.scope "cluster" }}
  namespace: {{ .Values.controllerNamespace }}
{{ end }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "0" # Ensures this test is run before other tests
spec:
  restartPolicy: Never
  serviceAccountName: default
  containers:
    - name: test
      image: "k8s.gcr.io/hyperkube:v1.12.1"
      command: ["/bin/sh"]
      args:
        - "-c"
        - |
          {{ if eq .Values.scope "cluster" }}
          echo "Testing if Skupper controller namespace is available..."
          if kubectl get namespace {{ .Values.controllerNamespace }}; then
            echo "Skupper controller namespace exists!"
          else
            echo "Skupper controller namespace does not exist!" && exit 1
          fi
          {{ end }}

          echo "Testing if Skupper controller deployment is available..."
          if kubectl get deployment skupper-controller {{ if eq .Values.scope "cluster" }}-n {{ .Values.controllerNamespace }}{{ end }}; then
            echo "Skupper controller deployment exists!"
          else
            echo "Skupper controller deployment does not exist!" && exit 1
          fi

          echo "Testing Skupper controller pods readiness..."
          pod_status=$(kubectl get pods -l application=skupper-controller {{ if eq .Values.scope "cluster" }}-n {{ .Values.controllerNamespace }}{{ end }} -o jsonpath='{.items[0].status.phase}')
          if [ "$pod_status" = "Running" ];
          then
            echo "Skupper controller Pod is running!"
          else
            echo "Skupper controller Pod is not running: $pod_status" && exit 1
          fi

          echo "Validating Role/ClusterRole and bindings..."
          if kubectl get {{ if eq .Values.scope "cluster" }}clusterrole{{ else }}role{{ end }} skupper-controller; then
            echo "ClusterRole or Role exists!"
          else
            echo "Role/ClusterRole does not exist!" && exit 1
          fi

          if kubectl get {{ if eq .Values.scope "cluster" }}clusterrolebinding{{ else }}rolebinding{{ end }} skupper-controller; then
            echo "ClusterRoleBinding or RoleBinding exists!"
          else
            echo "RoleBinding/ClusterRoleBinding does not exist!" && exit 1
          fi

          echo "All tests passed!"