version: 2.1
orbs:
    docker: circleci/docker@1.0.1
    kube-orb: circleci/kubernetes@0.11.0
    go: circleci/go@1.7.1

parameters:
  ci_service_controller_image:
    default: quay.io/skupper/service-controller:${CIRCLE_SHA1}
    type: string

  ci_site_controller_image:
    default: quay.io/skupper/site-controller:${CIRCLE_SHA1}
    type: string

  ci_config_sync_image:
    default: quay.io/skupper/config-sync:${CIRCLE_SHA1}
    type: string

  ci_vflow_collector_image:
    default: quay.io/skupper/vflow-collector:${CIRCLE_SHA1}
    type: string

  ci_test_image:
    default: quay.io/skupper/skupper-tests:${CIRCLE_SHA1}
    type: string

executors:
  local_cluster_test_executor:
    machine:
      image: ubuntu-2004:current
    resource_class: large

  local_cluster_policy_test_executor:
    machine:
      image: ubuntu-2004:current
    # Policy tests run all in sequence.  So, there is no benefit in adding more
    # CPU or memory.  Within the tests, there is paralellism, but on goroutines,
    # so they'd not use the additional CPUs.  The only thing a running policy
    # test competes with is the other system processes
    # resource_class: medium (the default)

commands:
  minikube-install:
    description: Installs the minikube executable onto the system.
    steps:
      - run:
          command: >-
            curl -Lo minikube
            https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 &&
            chmod +x minikube && sudo
            mv minikube /usr/local/bin/
          name: Install Minikube Executable

  minikube-start-medium:
    description: Starts the minikube service, with 2 CPU and 2 GiB
    steps:
      - run:
          command: >-
            minikube start --vm-driver=docker --cpus 2 --memory 2048
          name: Start Minikube Cluster

  # We're using only 6 GiB out of the available 15 GiB of the linux/large
  # CircleCI executor.  This allows us some leeway to grow within this
  # resource class when memory issues happen, so we can prepare for the
  # next resource class with plenty of time, when required.
  minikube-start-large:
    description: Starts the minikube service, with 4 CPU and 6GiB
    steps:
      - run:
          command: >-
            minikube start --vm-driver=docker --cpus 4 --memory 6144
          name: Start Minikube Cluster

  minikube-start-load-balancer:
    description: Starts the minikube tunnel
    steps:
      - run:
          command: minikube tunnel
          name: Start Minikube Tunnel
          background: true

  # By default, we grep for out of memory messages.  To get the full output,
  # just set the argument 're' to '.'
  minikube-logs:
    description: Tail minikube logs, grepping for something (by default, OOM)
    parameters:
      re:
        # This is for egrep, so you can do things like "(oom|error)"
        default: "(out of memory|oom.?kill)"
        type: string
    steps:
    - run:
        name: Tail and grep minikube logs
        command: minikube logs -f | egrep -i "<<parameters.re>>"
        background: true

  prepare_for_local_cluster_tests:
    description: install right versions of go, docker, kubectl, and also build
    steps:
      - run:
          name: Export environment variables persistent in execution shell
          command: |
            echo 'export KUBECONFIG=/home/circleci/.kube/config' >> $BASH_ENV
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
            echo 'export GOPATH=$HOME/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' >> $BASH_ENV
            echo 'export SKUPPER_SERVICE_CONTROLLER_IMAGE=<< pipeline.parameters.ci_service_controller_image >>' >> $BASH_ENV
            echo 'export SKUPPER_SITE_CONTROLLER_IMAGE=<< pipeline.parameters.ci_site_controller_image >>' >> $BASH_ENV
            echo 'export SKUPPER_CONFIG_SYNC_IMAGE=<< pipeline.parameters.ci_config_sync_image >>' >> $BASH_ENV
            echo 'export SKUPPER_VFLOW_COLLECTOR_IMAGE=<< pipeline.parameters.ci_vflow_collector_image >>' >> $BASH_ENV
            echo 'export TEST_IMAGE=<< pipeline.parameters.ci_test_image >>' >> $BASH_ENV
            source $BASH_ENV
      - checkout
      - run:
          name: cleanup previous go installation
          command: sudo rm -rf /usr/local/go
      - docker/install-docker
      - go/install
      - kube-orb/install-kubectl
      - run: make generate-client
      - run: make

  system_monitor:
    description: shows continuous system state
    steps:
    - run:
        name: sar info
        command: sar -h -q -r -u 60
        background: true
    - run:
        name: vmstat info
        command: vmstat -w -t 10
        background: true

  system_status:
    description: shows some point-in-time system status
    parameters:
      cluster_dump_re:
        default: "(oom|error)"
        type: string
    steps:
    - run:
        name: point-in-time system status
        command: |
          set +e
          cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
          free -m
          uptime
          minikube kubectl cluster-info dump | grep -i "<<parameters.cluster_dump_re>>"
          true
        when: always

  run_cluster_tests:
    description: run all e2e tests inside the current KUBECONFIG configured cluster
    parameters:
      args:
        default: ""
        type: string
    steps:
      - system_status # before the tests
      - run:
          name: Creating artifacts directory
          command: mkdir /tmp/artifacts
      - run:
          name: Run Integration Tests
          no_output_timeout: 60m
          command: |
            make build-cmd && sudo install skupper /usr/local/bin
            export PUBLIC_1_INGRESS_HOST=`minikube ip`
            go test -tags=integration -timeout=60m -v ./test/integration/...
      - run:
          name: Run client tests in real cluster
          command: go test -v -count=1 -timeout=20m ./client -use-cluster
      - run:
          name: Run skupper cli tests in real cluster
          command: go test -v -count=1 ./cmd/skupper -use-cluster
      - run:
          name: Run site-controller tests in real cluster
          command: go test -v -count=1 ./cmd/site-controller -use-cluster
      - system_status
      - run:
          name: Archiving test artifacts
          command: |
            find ./ -name "*.tar.gz" -o -name "*.log" -o -name "*.json" | tar -c -T - | tar -C /tmp/artifacts -xv
          when: always
      - store_artifacts:
          path: /tmp/artifacts
          destination: test-artifacts

  run_cluster_policy_tests:
    description: run all e2e policy tests inside the current KUBECONFIG configured cluster
    parameters:
      args:
        default: ""
        type: string
    steps:
      - system_status
      - run:
          name: Creating policy artifacts directory
          command: mkdir /tmp/policy-artifacts
      - run:
          name: Run Policy Integration Tests
          no_output_timeout: 60m
          command: |
            make build-cmd && sudo install skupper /usr/local/bin
            go test -tags=policy -timeout=60m -v ./test/integration/...
      - system_status
      - run:
          name: Archiving policy test artifacts
          command: |
            find ./ -name "*.tar.gz" -o -name "*.log" -o -name "*.json" | tar -c -T - | tar -C /tmp/policy-artifacts -xv
          when: always
      - store_artifacts:
          path: /tmp/policy-artifacts
          destination: policy-test-artifacts

  compile_go_program:
    description: Compile specified platform.
    parameters:
      platform:
        type: string
      goos:
        type: string
      goarch:
        type: string
      exesuffix:
        default: ""
        type: string
    steps:
      - run:
          name: Building << parameters.platform >>
          command: >-
            VERSION="${CIRCLE_TAG:-ci-${CIRCLE_BUILD_NUM}}";
            GOOS=<< parameters.goos >>
            GOARCH=<< parameters.goarch >>
            go build -ldflags "-X github.com/skupperproject/skupper/pkg/version.Version=${VERSION}"
            -o dist/<< parameters.platform >>/skupper<< parameters.exesuffix >>
            ./cmd/skupper

yaml-templates:
  branch_filters: &run_for_all_branches_and_numeric_tags
    filters:
      tags:
        only: /[0-9].*/

  master_branch_filters: &run_for_master_branch
    filters:
      branches:
        ignore: /.*/
        only: /master/

  release_filters: &run_for_numeric_tags
    filters:
      branches:
        ignore: /.*/
      tags:
        only: /[0-9].*/

  release_requires: &release_requires
    requires:
      - build-all
      - test
      - main_tests_minikube_local_cluster
      - policy_tests_minikube_local_cluster

workflows:
  version: 2.1
  build-workflow:
    jobs:
      - build-all:
          <<: *run_for_all_branches_and_numeric_tags
      - test:
          <<: *run_for_all_branches_and_numeric_tags
      - build_and_push_test_images:
          <<: *run_for_all_branches_and_numeric_tags

      - main_tests_minikube_local_cluster:
          <<: *run_for_all_branches_and_numeric_tags
          pre-steps:
            - prepare_for_local_cluster_tests
          requires:
            - test
            - build_and_push_test_images

      - policy_tests_minikube_local_cluster:
          <<: *run_for_all_branches_and_numeric_tags
          pre-steps:
            - prepare_for_local_cluster_tests
          requires:
            - test
            - build_and_push_test_images

      - publish-github-release-artifacts:
          <<: *run_for_numeric_tags
          <<: *release_requires

      - publish-github-release-images:
          <<: *run_for_numeric_tags
          <<: *release_requires

      - publish-github-master-images:
          <<: *run_for_master_branch
          <<: *release_requires

      - remove_from_registry: # will not run for tags, by default
          requires:
            - test
            - policy_tests_minikube_local_cluster
            - main_tests_minikube_local_cluster

jobs:
  test:
    executor:
      name: go/default
      tag: "1.19"
    steps:
      - checkout
      - run:
          name: "Enforce Go Formatted Code"
          command: >
              if [ `make format -s | wc -l` -ne 0 ]; then
                git --no-pager diff
                echo "Bad formatting! execute \"\$make format\" locally and push again!"
                exit 1
              fi
      - go/mod-download-cached
      - run: make generate-client
      - run: make
      - run: make package
      - run: make clean
      - go/test:
          coverpkg: "./api/...,./client/...,./cmd/...,./pkg/..."

  build_and_push_test_images:
    executor: local_cluster_test_executor
    steps:
      - docker/install-docker
      - checkout
      - run:
          name: Export environment variables persistent in execution shell
          command: |
            echo 'export SERVICE_CONTROLLER_IMAGE=<< pipeline.parameters.ci_service_controller_image >>' >> $BASH_ENV
            echo 'export SITE_CONTROLLER_IMAGE=<< pipeline.parameters.ci_site_controller_image >>' >> $BASH_ENV
            echo 'export CONFIG_SYNC_IMAGE=<< pipeline.parameters.ci_config_sync_image >>' >> $BASH_ENV
            echo 'export VFLOW_COLLECTOR_IMAGE=<< pipeline.parameters.ci_vflow_collector_image >>' >> $BASH_ENV
            echo 'export TEST_IMAGE=<< pipeline.parameters.ci_test_image >>' >> $BASH_ENV
            source $BASH_ENV
      - run: echo "skupper_image = ${SKUPPER_SERVICE_CONTROLLER_IMAGE}"
      - run: docker login quay.io -u ${QUAY_LOGIN} -p ${QUAY_PASSWORD}
      - run: make -e generate-client
      - run: make -e docker-build
      - run: make -e docker-push

  remove_from_registry:
    executor:
      name: go/default
      tag: "1.19"
    steps:
      - checkout
      - setup_remote_docker
      - run: docker login quay.io -u ${QUAY_LOGIN} -p ${QUAY_PASSWORD}
      - run: go get github.com/genuinetools/reg
      - run: go install github.com/genuinetools/reg
      - run: reg rm << pipeline.parameters.ci_service_controller_image >>
      - run: reg rm << pipeline.parameters.ci_site_controller_image >>
      - run: reg rm << pipeline.parameters.ci_test_image >>
      - run: reg rm << pipeline.parameters.ci_config_sync_image >>
      - run: reg rm << pipeline.parameters.ci_vflow_collector_image >>

  build-all:
    executor:
      name: go/default
      tag: "1.19"
    steps:
      - checkout
      - go/mod-download-cached

      - compile_go_program:
          goos: linux
          goarch: amd64
          platform: linux-amd64

      - compile_go_program:
          goos: linux
          goarch: "386"
          platform: linux-i386

      - compile_go_program:
          goos: windows
          goarch: "386"
          platform: windows-i386
          exesuffix: ".exe"

      - compile_go_program:
          goos: windows
          goarch: amd64
          platform: windows-amd64
          exesuffix: ".exe"

      - compile_go_program:
          goos: darwin
          goarch: amd64
          platform: mac-amd64

      - compile_go_program:
          goos: darwin
          goarch: arm64
          platform: mac-arm64

      - compile_go_program:
          goos: linux
          goarch: arm
          platform: linux-arm32

      - compile_go_program:
          goos: linux
          goarch: arm64
          platform: linux-arm64

      - persist_to_workspace:
          root: .
          paths:
              - dist

  main_tests_minikube_local_cluster:
    executor: local_cluster_test_executor
    steps:
      - run: echo "skupper_image = ${SKUPPER_SERVICE_CONTROLLER_IMAGE}"
      - minikube-install
      - minikube-start-large
      - minikube-start-load-balancer
      - minikube-logs
      - system_monitor
      - run: kubectl cluster-info
      - run_cluster_tests

  policy_tests_minikube_local_cluster:
    executor: local_cluster_policy_test_executor
    steps:
      - run: echo "skupper_image = ${SKUPPER_SERVICE_CONTROLLER_IMAGE}"
      - minikube-install
      - minikube-start-medium
      - minikube-start-load-balancer
      - minikube-logs
      - system_monitor
      - run: kubectl cluster-info
      - run_cluster_policy_tests

  publish-github-release-artifacts:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Create a Draft Release on GitHub"
          command: |
            VERSION="${CIRCLE_TAG}"
            BASEDIR=`pwd`
            mkdir "${BASEDIR}/archives"
            for p in `ls dist` ; do
              cd "$BASEDIR/dist/$p"
              if [[ $p == windows* ]] ; then
                zip -q "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.zip" *
              else
                tar -zcf "${BASEDIR}/archives/skupper-cli-${VERSION}-$p.tgz" *
              fi
            done
            cd ${BASEDIR}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -replace -prerelease -draft ${VERSION} "${BASEDIR}/archives"

  publish-github-release-images:
    executor:
      name: go/default
      tag: "1.19"
    steps:
      - checkout
      - setup_remote_docker
      - run: docker login quay.io -u ${QUAY_LOGIN} -p ${QUAY_PASSWORD}
      - run:
          name:
          command: |
            echo 'export SERVICE_CONTROLLER_IMAGE=quay.io/skupper/service-controller:${CIRCLE_TAG}' >> $BASH_ENV
            echo 'export SITE_CONTROLLER_IMAGE=quay.io/skupper/site-controller:${CIRCLE_TAG}' >> $BASH_ENV
            echo 'export CONFIG_SYNC_IMAGE=quay.io/skupper/config-sync:${CIRCLE_TAG}' >> $BASH_ENV
            echo 'export VFLOW_COLLECTOR_IMAGE=quay.io/skupper/vflow-collector:${CIRCLE_TAG}' >> $BASH_ENV
            echo 'export TEST_IMAGE=quay.io/skupper/skupper-tests:${CIRCLE_TAG}' >> $BASH_ENV
            source $BASH_ENV
            make -e generate-client
            make -e docker-build
            make -e docker-push

  publish-github-master-images:
    executor:
      name: go/default
      tag: "1.19"
    steps:
      - checkout
      - setup_remote_docker
      - run: docker login quay.io -u ${QUAY_LOGIN} -p ${QUAY_PASSWORD}
      - run:
          name: "Publishing master images"
          command: |
            echo 'export SERVICE_CONTROLLER_IMAGE=quay.io/skupper/service-controller:master' >> $BASH_ENV
            echo 'export SITE_CONTROLLER_IMAGE=quay.io/skupper/site-controller:master' >> $BASH_ENV
            echo 'export CONFIG_SYNC_IMAGE=quay.io/skupper/config-sync:master' >> $BASH_ENV
            echo 'export VFLOW_COLLECTOR_IMAGE=quay.io/skupper/vflow-collector:master' >> $BASH_ENV
            echo 'export TEST_IMAGE=quay.io/skupper/skupper-tests:master' >> $BASH_ENV
            source $BASH_ENV
            make -e generate-client
            make -e docker-build
            make -e docker-push
