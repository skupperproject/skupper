/*
Copyright 2021 The Skupper Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/skupperproject/skupper/pkg/apis/skupper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AttachedConnectorAnchorLister helps list AttachedConnectorAnchors.
// All objects returned here must be treated as read-only.
type AttachedConnectorAnchorLister interface {
	// List lists all AttachedConnectorAnchors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedConnectorAnchor, err error)
	// AttachedConnectorAnchors returns an object that can list and get AttachedConnectorAnchors.
	AttachedConnectorAnchors(namespace string) AttachedConnectorAnchorNamespaceLister
	AttachedConnectorAnchorListerExpansion
}

// attachedConnectorAnchorLister implements the AttachedConnectorAnchorLister interface.
type attachedConnectorAnchorLister struct {
	indexer cache.Indexer
}

// NewAttachedConnectorAnchorLister returns a new AttachedConnectorAnchorLister.
func NewAttachedConnectorAnchorLister(indexer cache.Indexer) AttachedConnectorAnchorLister {
	return &attachedConnectorAnchorLister{indexer: indexer}
}

// List lists all AttachedConnectorAnchors in the indexer.
func (s *attachedConnectorAnchorLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedConnectorAnchor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedConnectorAnchor))
	})
	return ret, err
}

// AttachedConnectorAnchors returns an object that can list and get AttachedConnectorAnchors.
func (s *attachedConnectorAnchorLister) AttachedConnectorAnchors(namespace string) AttachedConnectorAnchorNamespaceLister {
	return attachedConnectorAnchorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttachedConnectorAnchorNamespaceLister helps list and get AttachedConnectorAnchors.
// All objects returned here must be treated as read-only.
type AttachedConnectorAnchorNamespaceLister interface {
	// List lists all AttachedConnectorAnchors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AttachedConnectorAnchor, err error)
	// Get retrieves the AttachedConnectorAnchor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AttachedConnectorAnchor, error)
	AttachedConnectorAnchorNamespaceListerExpansion
}

// attachedConnectorAnchorNamespaceLister implements the AttachedConnectorAnchorNamespaceLister
// interface.
type attachedConnectorAnchorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AttachedConnectorAnchors in the indexer for a given namespace.
func (s attachedConnectorAnchorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AttachedConnectorAnchor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AttachedConnectorAnchor))
	})
	return ret, err
}

// Get retrieves the AttachedConnectorAnchor from the indexer for a given namespace and name.
func (s attachedConnectorAnchorNamespaceLister) Get(name string) (*v1alpha1.AttachedConnectorAnchor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attachedconnectoranchor"), name)
	}
	return obj.(*v1alpha1.AttachedConnectorAnchor), nil
}
