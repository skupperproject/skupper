#!/bin/sh

set -Ceu

{{.SelfExtractPart}}

# Bundle installation and removal script

# site name to be provided by bundle generation
export SITE_NAME="{{.SiteName}}"
export SOURCE_NAMESPACE="{{.Namespace}}"
export SOURCE_PLATFORM="{{.Platform}}"
export NAMESPACE="${SOURCE_NAMESPACE}"
export SKUPPER_PLATFORM="{{.Platform}}"
export PLATFORM_COMMAND="podman"
export REMOVE=false
export DUMP_TOKENS=false
export VERSION="{{.Version}}"

# standard output directories
if [ -z "${UID:-}" ]; then
    UID="$(id -u)"
    export UID
fi
export SKUPPER_OUTPUT_PATH="${XDG_DATA_HOME:-${HOME}/.local/share}/skupper"
export SERVICE_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/systemd/user"
export RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/${UID}}"
export SYSTEMCTL="systemctl --user"
export USERNS="keep-id"
GID=$(id -g "${UID}")
export RUNAS="${UID}:${GID}"
if [ "${UID}" -eq 0 ]; then
    export SKUPPER_OUTPUT_PATH="/var/lib/skupper"
    export SERVICE_DIR="/etc/systemd/system"
    export RUNTIME_DIR="/run"
    export SYSTEMCTL="systemctl"
    # shellcheck disable=SC2089
    export USERNS="''"
fi
export NAMESPACES_PATH="${SKUPPER_OUTPUT_PATH}/namespaces"
export PLATFORM_FILE="${NAMESPACES_PATH}/${NAMESPACE}/internal/platform.yaml"
export USER="${USER:-$(id -un)}"
SITE_ID="$(hostname -s)-${USER}-$(date +%s)"
export SITE_ID

exit_error() {
    echo "$*"
    exit 1
}

usage() {
    echo "Usage: $0 [-p <podman|docker|systemd>] [-x] [-d <output-dir>]" >&2
    echo "    -p    the platform to use: podman, docker, systemd (default: ${SOURCE_PLATFORM})" >&2
    echo "    -n    target namespace (default: ${SOURCE_NAMESPACE})" >&2
    echo "    -x    remove existing site definition" >&2
    echo "    -d    dump static links from bundle into the provide output directory" >&2
    exit 1
}

parse_opts() {
    while getopts "xhd:p:n:" opt; do
        case "${opt}" in
            p)
                valid_platforms="podman docker systemd"
                export SKUPPER_PLATFORM="${OPTARG}"
                is_platform_valid=false
                for valid_platform in ${valid_platforms}; do
                    if [ "${valid_platform}" = "${SKUPPER_PLATFORM}" ]; then
                        is_platform_valid=true
                        break
                    fi
                done
                if [ ! "${is_platform_valid}" ]; then
                    echo "Invalid platform: ${SKUPPER_PLATFORM}"
                    usage
                fi
                ;;
            n)
                if [ -n "${OPTARG}" ]; then
                    export NAMESPACE="${OPTARG}"
                fi
                export PLATFORM_FILE="${NAMESPACES_PATH}/${NAMESPACE}/internal/platform.yaml"
                ;;
            d)
                export DUMP_TOKENS=true
                export SKUPPER_TOKEN_OUTPUT_PATH="${OPTARG}"
                if [ -z "${SKUPPER_TOKEN_OUTPUT_PATH}" ] || [ ! -d "${SKUPPER_TOKEN_OUTPUT_PATH}" ]; then
                    echo "Output directory is not valid"
                    usage
                fi
                if [ ! -w "${SKUPPER_TOKEN_OUTPUT_PATH}" ]; then
                    echo "No permission to write static links into the provided output directory"
                    usage
                fi
                ;;
            x)
                export REMOVE=true
                ;;
            h)
                usage
                ;;
            *)
                usage
                ;;
        esac
    done

    if [ "${SKUPPER_PLATFORM}" = "docker" ]; then
        export PLATFORM_COMMAND="docker"
        if [ "${UID}" -ne 0 ]; then
            # shellcheck disable=SC2090
            export USERNS="host"
        fi
        docker_gid=$(getent group docker | cut -d: -f3)
        export RUNAS="${UID}:${docker_gid}"
    elif [ "${SKUPPER_PLATFORM}" = "systemd" ]; then
        export PLATFORM_COMMAND="skrouterd"
    fi

}

create_service() {
    # if systemd is not available, skip it
    ${SYSTEMCTL} list-units > /dev/null 2>&1 || return
    service_name="skupper-${NAMESPACE}.service"
    service_file_suffix="container"
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && service_file_suffix="systemd"
    service_file="${SKUPPER_OUTPUT_PATH}/namespaces/${NAMESPACE}/internal/scripts/skupper.service.${service_file_suffix}"

    if [ ! -f "${service_file}" ]; then
        echo "SystemD service has not been defined"
        return 0
    fi

    # Moving it to the appropriate location
    if [ "${UID}" -eq 0 ]; then
        cp "${service_file}" "/etc/systemd/system/${service_name}"
    else
        if [ ! -d "${SERVICE_DIR}" ]; then
            mkdir -p "${SERVICE_DIR}"
        fi
        cp "${service_file}" "${SERVICE_DIR}/${service_name}"
    fi

    ${SYSTEMCTL} enable --now "${service_name}"
    ${SYSTEMCTL} daemon-reload
}

remove_service() {
    # if systemd is not available, skip it
    ${SYSTEMCTL} list-units > /dev/null 2>&1 || return

    service="skupper-${NAMESPACE}.service"
    ${SYSTEMCTL} stop "${service}"
    ${SYSTEMCTL} disable "${service}"
    rm -f "${SERVICE_DIR:?}/${service}"
    ${SYSTEMCTL} daemon-reload
    ${SYSTEMCTL} reset-failed
}

remove_site() {
    if [ ! -d "${NAMESPACES_PATH}/${NAMESPACE}" ]; then
        echo "Namespace \"${NAMESPACE}\" does not exist"
        exit 0
    fi

    SITE_PATH="${NAMESPACES_PATH}/${NAMESPACE}/runtime/resources/site/"
    if ! grep -qr "name: ${SITE_NAME}\$" "${SITE_PATH}"; then
        echo "Site \"${SITE_NAME}\" is not defined on namespace \"${NAMESPACE}\""
        exit 0
    fi

    echo "Removing Skupper site definition for ${SITE_NAME} from namespace ${NAMESPACE}"
    SKUPPER_PLATFORM=$(grep '^platform: ' "${PLATFORM_FILE}" | sed -e 's/.*: //g')
    if [ "${SKUPPER_PLATFORM}" != "systemd" ]; then
        # removing router container
        ${SKUPPER_PLATFORM} rm -f "${NAMESPACE}-skupper-router"
    fi
    # removing site definition
    rm -rf "${NAMESPACES_PATH:?}/${NAMESPACE:?}/"
}

dump_tokens() {
    tokens="$(ls "./${SOURCE_NAMESPACE}/runtime/links/")"
    if [ -z "${tokens}" ]; then
        echo "No static links defined in this site bundle"
        return
    fi
    token_out_dir="${SKUPPER_TOKEN_OUTPUT_PATH:?}/${SITE_NAME:?}"
    mkdir -p "${token_out_dir}"
    cp "./${SOURCE_NAMESPACE}/runtime/links/"*.yaml "${token_out_dir}"
    echo "Static links for site \"${SITE_NAME}\" have been saved into ${token_out_dir}"
}

set_router_access_port() {
    config_file="${NAMESPACES_PATH}/${NAMESPACE}/runtime/router/skrouterd.json"
    python "${NAMESPACES_PATH:?}/${NAMESPACE:?}/internal/scripts/router_free_port.py" "${config_file}"
}

create_sed_script() {
    ssl_profile_base_path="\${SSL_PROFILE_BASE_PATH}"
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && ssl_profile_base_path="${NAMESPACES_PATH}/${NAMESPACE}"
    container_engine="podman"
    [ "${SKUPPER_PLATFORM}" != "systemd" ] && container_engine="${SKUPPER_PLATFORM}"
    # populating sed script
    # note that this is processed a golang template prior to
    # being inserted into the bundle
    # shellcheck disable=SC1083
    {
        echo "s#{{"{{"}}.SiteNameSuffix{{"}}"}}#${SITE_ID}#g"
        echo "s#{{"{{"}}.Namespace{{"}}"}}#${NAMESPACE}#g"
        echo "s#{{"{{"}}.Platform{{"}}"}}#${SKUPPER_PLATFORM}#g"
        echo "s#{{"{{"}}.SslProfileBasePath{{"}}"}}#${ssl_profile_base_path}#g"
        echo "s#{{"{{"}}.ContainerEngine{{"}}"}}#${container_engine}#g"
        echo "s#{{"{{"}}.SiteId{{"}}"}}#${SITE_ID}#g"
        echo "s#{{"{{"}}.NamespacesPath{{"}}"}}#${NAMESPACES_PATH}#g"
        echo "s#{{"{{"}}.RuntimeDir{{"}}"}}#${RUNTIME_DIR}#g"
        echo "s#{{"{{"}}.SiteScriptPath{{"}}"}}#${NAMESPACES_PATH}/${NAMESPACE}/internal/scripts#g"
        echo "s#{{"{{"}}.SiteConfigPath{{"}}"}}#${NAMESPACES_PATH}/${NAMESPACE}/runtime/router#g"
        echo "s#{{"{{"}}.RunAs{{"}}"}}#${RUNAS}#g"
        echo "s#{{"{{"}}.UserNamespace{{"}}"}}#${USERNS}#g"
    } >> script.sed
}

render_sed_templates() {
    grep -rl '{{"{{"}}' "${NAMESPACES_PATH}/${NAMESPACE}" | xargs -r -i sed -f script.sed -i {}
    rm -f script.sed
}

show_token_info() {
    token_path="${NAMESPACES_PATH:?}/${NAMESPACE:?}/runtime/links"
    [ ! -d "${token_path}" ] && return
    tokens_found=$(find "${token_path}" -type f | wc -l)
    if [ "${tokens_found}" -gt 0 ]; then
        echo "Static links have been defined at: ${token_path}"
    fi
}

create_containers() {
    [ "${SKUPPER_PLATFORM}" = "systemd" ] && return
    "${NAMESPACES_PATH:?}/${NAMESPACE:?}/internal/scripts/containers_create.sh"
}

create_site() {
    echo "Skupper site bundle installation"
    echo "Namespace : ${NAMESPACE}"
    echo "Site name : ${SITE_NAME}"
    echo "Platform  : ${SKUPPER_PLATFORM}"
    echo "Definition: ${NAMESPACES_PATH:?}/${NAMESPACE:?}/input/resources"
    echo "Version   : ${VERSION}"

    # Create base directory tree
    mkdir -p "${NAMESPACES_PATH}/${NAMESPACE}"

    # Installing site definition files
    cp -rf "./${SOURCE_NAMESPACE}"/* "${NAMESPACES_PATH}/${NAMESPACE}/"

    # Creating platform.yaml
    echo "platform: ${SKUPPER_PLATFORM}" > "${PLATFORM_FILE}"

    # Adjust router normal access port
    set_router_access_port

    # Creating sed script to render template files at install time
    create_sed_script
    render_sed_templates

    # If bundle has tokens, show token location after site has been created
    show_token_info

    # Creating containers (container engine only)
    create_containers

    # Create systemd service
    create_service

    echo "Site \"${SITE_NAME}\" is now running on namespace \"${NAMESPACE}\""
}

sanity_check() {
    required_fields="SITE_NAME SOURCE_NAMESPACE NAMESPACE SKUPPER_OUTPUT_PATH SERVICE_DIR NAMESPACES_PATH SKUPPER_PLATFORM"
    required_commands="python sed find grep wc xargs tar getent echo cp id cut ls rm mkdir ${PLATFORM_COMMAND}"

    for field_name in ${required_fields}; do
        eval [ -n "\${${field_name}}" ] || exit_error "Internal error: required field ${field_name} not defined"
    done
    for cmd in ${required_commands}; do
        if ! command -v "${cmd}" > /dev/null 2>&1; then
            exit_error "A required command could not be found: ${cmd}"
        fi
    done

    if ! ${REMOVE} && ! ${DUMP_TOKENS}; then
        if [ -d "${NAMESPACES_PATH:?}/${NAMESPACE:?}/runtime" ]; then
            echo "Failed: namespace \"${NAMESPACE}\" is already defined"
            echo "Location: ${NAMESPACES_PATH}/${NAMESPACE}"
            exit 1
        fi

        if [ -d "${NAMESPACES_PATH:?}/${NAMESPACE:?}/input/resources" ]; then
            echo "Failed: namespace \"${NAMESPACE}\" already contains input resources"
            echo "Location: ${NAMESPACES_PATH:?}/${NAMESPACE:?}/input/resources"
            exit 1
        fi
    fi
}

list_valid_certificates() {
    base_path="${1}"
    cd "${base_path}"
    for dir in $(find ./* -type d 2> /dev/null | cut -c 3-); do
        [ -f "${dir}/tls.key" ] && [ -f "${dir}/tls.crt" ] && [ -f "${dir}/ca.crt" ] && echo "$dir"
    done
}

handle_provided_issuers() {
    export USER_ISSUERS_PATH="${NAMESPACES_PATH}/${NAMESPACE}/input/issuers"
    [ ! -d "${USER_ISSUERS_PATH}" ] && return
    cas=$(list_valid_certificates "${USER_ISSUERS_PATH}")
    if [ -z "${cas}" ]; then
        return
    fi
    echo "User provided issuers found:"
    if [ -n "${cas}" ]; then
        for ca in ${cas}; do
            echo "  - ${ca}"
        done
    fi
    cp -r "${USER_ISSUERS_PATH}"/* "./${SOURCE_NAMESPACE}/runtime/issuers"
}

handle_provided_certificates() {
    export USER_CERTIFICATES_PATH="${NAMESPACES_PATH}/${NAMESPACE}/input/certs"
    [ ! -d "${USER_CERTIFICATES_PATH}" ] && return
    certs=$(list_valid_certificates "${USER_CERTIFICATES_PATH}")
    if [ -z "${certs}" ]; then
        return
    fi
    echo "User provided certificates found:"
    if [ -n "${certs}" ]; then
        for cert in ${certs}; do
            echo "  - ${cert}"
        done
    fi
    cp -r "${USER_CERTIFICATES_PATH}"/* "./${SOURCE_NAMESPACE}/runtime/certs"
    update_static_links
    generate_static_links_for_sans
}

update_static_links() {
    DIR="./${SOURCE_NAMESPACE}"
    export USER_CERTIFICATES_PATH="${NAMESPACES_PATH}/${NAMESPACE}/input/certs"
    router_access_files=$(find "${DIR:?}/internal/snapshot/routerAccesses" -type f)

    for ra in ${router_access_files}; do
        ra_name=$(grep name: "${ra}" | grep -v '\- name:' | awk '{print $NF}' | sed 's/"//g')
        tls_credential=$(grep tlsCredentials: "${ra}" | awk '{print $NF}' | sed 's/"//g')
        bind_host=$(grep bindHost: "${ra}" | awk '{print $NF}' | sed 's/"//g')
        client_cert_path="${USER_CERTIFICATES_PATH}/client-${tls_credential:-${ra_name}}"

        # no client certificate provided, skip
        [ ! -d "${client_cert_path}" ] && continue

        found=true
        for file in tls.key tls.crt ca.crt; do
            if [ ! -f "${client_cert_path}/${file}" ]; then
                found=false
                break
            fi
        done
        ! ${found} && continue

        # client certs found, reading client certificates
        ca_crt=$(base64 -w0 "${client_cert_path}/ca.crt")
        tls_crt=$(base64 -w0 "${client_cert_path}/tls.crt")
        tls_key=$(base64 -w0 "${client_cert_path}/tls.key")
        # find all static links generated for the given RouterAccess
        static_link_files=$(find "${DIR:?}/runtime/links" -type f -name "link-${ra_name}-*")
        for link in ${static_link_files}; do
            echo "- Updating client credentials on static link: ${link}"
            sed -i "s/tls.key: .*/tls.key: ${tls_key}/g" "${link}"
            sed -i "s/tls.crt: .*/tls.crt: ${tls_crt}/g" "${link}"
            sed -i "s/ca.crt: .*/ca.crt: ${ca_crt}/g" "${link}"
        done
    done
}

generate_static_links_for_sans() {
    DIR="./${SOURCE_NAMESPACE}"

    # if openssl is present, discover SANs and create missing static links
    if ! command -v openssl > /dev/null 2>&1; then
        return
    fi

    router_access_files=$(find "${DIR:?}/internal/snapshot/routerAccesses" -type f)

    for ra in ${router_access_files}; do
        ra_name=$(grep name: "${ra}" | grep -v '\- name:' | awk '{print $NF}' | sed 's/"//g')
        tls_credential=$(grep tlsCredentials: "${ra}" | awk '{print $NF}' | sed 's/"//g')
        bind_host=$(grep bindHost: "${ra}" | awk '{print $NF}' | sed 's/"//g')

        # discovering SANS
        server_cert="${DIR}/runtime/certs/${tls_credential:-${ra_name}}/tls.crt"
        [ ! -f "${server_cert}" ] && continue
        subjects="$(openssl x509 -noout -ext subjectAltName -in "${server_cert}" |grep -v 'Subject Alternative Name:' | \
                    sed 's/ //g;s/,/\n/g' |  awk -F: '{if ($1 == "DNS" || $1 == "IPAddress") print $2}')"
        [ -z "${subjects}" ] && continue
        for subject in ${subjects}; do
            link_file="${DIR}/runtime/links/link-${ra_name}-${subject}.yaml"
            [ -f "${link_file}" ] && continue
            echo "- Creating static link for new server subject found: ${subject}"
            cp "${DIR}/runtime/links/link-${ra_name}-${bind_host:-127.0.0.1}.yaml" "${DIR}/runtime/links/link-${ra_name}-${subject}.yaml"
            sed -i "s/host: .*/host: ${subject}/g" "${DIR}/runtime/links/link-${ra_name}-${subject}.yaml"
        done
    done
}

main() {
    # validate provided options
    parse_opts "$@"

    sanity_check

    if ${REMOVE}; then
        remove_site
        remove_service
        return
    fi

    handle_provided_issuers
    handle_provided_certificates

    if ${DUMP_TOKENS}; then
        dump_tokens
        return
    fi

    create_site
}

main "$@"
